@{
    ViewData["Title"] = "Question Detail";

}

<!-- Chi tiết câu hỏi -->
<div class="card p-12 mb-12 question-detail-card " style="margin-bottom: 20px">
    <h1 id="qTitle" class="card-title">How to implement a static data example in ASP.NET?</h1>
    <div id="author">
        
    </div>
    
    

    <p id="qContent" class="card-text">
        I'm trying to understand how to work with static data in ASP.NET for a Q&A page example. Any guidance is appreciated.
    </p>
</div>

<!-- Danh sách câu trả lời theo chiều dọc -->
<div class="answers-section" style="margin: 20px 0px;">
    <h3>Answers</h3>

    <!-- Answer Item -->
    <div class="card p-12 mb-12 answer-item" style=" margin: 20px 0px;">

        <p><strong>User #2</strong> answered on October 16, 2024</p>
        
        <p>You can create static data using in-memory objects. It's very useful for testing.</p>
        <p class="text-muted">Updated on October 17, 2024</p>
    </div>
</div>

<!-- Ô thêm bình luận -->
<div class="card p-12 mt-12 comment-box" style=" margin: 100px 0px;">
    <h3>Add an Answer</h3>
    <form id="commentForm">
        <div class="mb-3">
            <label for="commentContent" class="form-label">Your Answer:</label>
            <textarea id="commentContent" class="form-control" rows="3" placeholder="Enter your answer here..."></textarea>
        </div>
        <button id="btnAnswer"  type="button" class="btn btn-primary">Submit Answer</button>
    </form>
</div>

@section Scripts {
    <script>
        var questionUrl = 'https://localhost:5000/api/Question/';
        var pathArray = window.location.pathname.split('/');
        var questionId = pathArray[pathArray.length - 1];
        $(document).ready(function () {

            getQuestion();
            $('#btnAnswer').on('click', function () {
                performAnswer();
            });
            
        });

        function getQuestion() {
            
            const authToken = localStorage.getItem('authToken');
            let user = JSON.parse(authToken);
            $.ajax({
                url: questionUrl + questionId,
                method: 'GET',
                success: function (data) {
                    console.log(data.status);
                    $('#qTitle').text(data.title);
                    $('#author').empty();
                    $('#author').append(`
                                                    <img src="${data.image}" alt="${data.user} Image" class="rounded-circle" style="width: 40px; height: 40px; margin-right: 10px;">
                                            <p id="qUser" class="text-muted">Asked by ${data.user} on ${data.createdAt}</p>
                                                                    `);
                    $('#qContent').text(data.content);
                    $('.answers-section').empty();
                    if (data.status === false) {
                        $('.comment-box').hide(); 
                    } else {
                        $('.comment-box').show(); 
                    }

                    if (data.answers && data.answers.length > 0) {
                        var answerContent = '';
                        data.answers.forEach(answer => {
                            answerContent += `
                                                <div class="card p-12 mb-12 answer-item">
                                                                        <img src="${answer.image}" alt="${answer.user} Image" class="rounded-circle" style="width: 40px; height: 40px; margin-right: 10px;">
                                                    <p><strong>${answer.user}</strong> answered on ${answer.createdAt}</p>
                                                            <p class="answer-content">${answer.content}</p>
                                                    ${answer.updated ? `<p class="text-muted updatedContent">Updated on ${answer.updated}</p>` : ''}
                                                
                                            `;
                            if (authToken) {
                                if (user.userId == answer.userId) {
                                    answerContent += `
                                                                        <button onclick="updateAnswer(${answer.answerId})" class="btn btn-secondary btn-edit" >Edit</button>
                                                                <button onclick="deleteAnswer(${answer.answerId})" class="btn btn-danger btn-delete" >Delete</button>
                                                                                <div class="edit-section" style="display:none;">
                                                        <textarea class="form-control" rows="3">${answer.content}</textarea>
                                                        <button onclick="saveAnswer(${answer.answerId}, this)" class="btn btn-primary">Save</button>
                                                    </div>
                                                            </div>
                                                                    `;
                                } else {
                                    answerContent += `</div>`;
                                }
                            }
                            else {
                                answerContent += `
                                                                      </div>
                                                                    `;
                            }
                        });
                        $('.answers-section').html(answerContent);

                        

                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                    alert('An error occurred while fetching data.');
                }
            });
        }
        function deleteAnswer(answerId) {
            if (confirm('Are you sure you want to delete this answer?')) {
                $.ajax({
                    type: "DELETE",
                    url: `https://localhost:5000/api/Answer/${answerId}`,
                    success: function () {
                        // Xóa phần tử câu trả lời khỏi giao diện
                        $(`.answer-item:has(button[onclick*='deleteAnswer(${answerId})'])`).remove();
                        alert('Answer deleted successfully.');
                    },
                    error: function (xhr, status, err) {
                        console.error(xhr);
                        console.error(err);
                        alert('An error occurred while deleting the answer.');
                    }
                });
            }
        }

        function updateAnswer(answerId){
            const answerItem = $(`.answer-item:has(button[onclick*='updateAnswer(${answerId})'])`);

            // Tìm phần tử nội dung và trường chỉnh sửa bên trong answerItem
            const contentElement = answerItem.find('.answer-content');
            const editSection = answerItem.find('.edit-section');

            // Ẩn nội dung hiện tại
            contentElement.hide();

            // Hiện trường chỉnh sửa
            editSection.show();

            // Cung cấp giá trị của nội dung câu trả lời vào trường chỉnh sửa
            const currentContent = contentElement.text();
            editSection.find('textarea').val(currentContent);0
        }
        function saveAnswer(answerId, button) {
            const answerItem = $(button).closest('.answer-item');
            const newContent = answerItem.find('textarea').val();

            const authToken = localStorage.getItem('authToken');
            let user = JSON.parse(authToken);

            var sendingData = {
                content: newContent,
                userId: user.userId,
                questionId: questionId,
            };
            // Gửi yêu cầu cập nhật
            $.ajax({
                type: "PUT",
                url: `https://localhost:5000/api/Answer/` + answerId,
                data: JSON.stringify(sendingData),
                contentType: "application/json",
                success: function (data) {
                    // Cập nhật lại nội dung hiển thị UpdatedAt
                    answerItem.find('.answer-content').text(newContent).show();
                    answerItem.find('.updatedContent').text('Updated on ' + formatDate(data.updatedAt));
                    answerItem.find('.edit-section').hide(); // Ẩn trường chỉnh sửa
                },
                error: function (xhr, status, err) {
                    console.error(xhr);
                    console.error(err);
                }
            });
        }


        function formatDate(dateString) {
            const date = new Date(dateString);

            const month = String(date.getMonth() + 1).padStart(2, '0'); 
            const day = String(date.getDate()).padStart(2, '0'); 
            const year = date.getFullYear(); 

            let hours = date.getHours();
            const minutes = String(date.getMinutes()).padStart(2, '0');
            const seconds = String(date.getSeconds()).padStart(2, '0');

            const ampm = hours >= 12 ? 'PM' : 'AM';
            hours = hours % 12;
            hours = hours ? String(hours).padStart(2, '0') : '12'; // Giờ 0 sẽ là 12

            return `${month}/${day}/${year} ${hours}:${minutes}:${seconds} ${ampm}`;
        }
        function performAnswer() {
            const authToken = localStorage.getItem('authToken');
            
            if (!authToken) {
                alert('You need to login to answer!');
                return;
            }

            if (!validation()) {
                return;
            }
            let user =  JSON.parse(authToken);
            var pathArray = window.location.pathname.split('/');
            var questionId = pathArray[pathArray.length - 1];
            var sendingData = {
                questionId: questionId,
                userId: user.userId,
                content: $('#commentContent').val(),
            };

            $.ajax({
                async: false,
                type: "POST",
                url: 'https://localhost:5000/api/Answer',
                data: JSON.stringify(sendingData),
                contentType: "application/json",
                success: function (receivedData) {
                    
                    // Optionally reload answers or clear the comment box here
                    getQuestion();
                    $('#commentContent').val('');
                },
                error: function (xhr, status, err) {
                    console.error(xhr);
                    console.error(err);
                }
            });
        }

        function validation() {
            return $('#commentContent').val().trim() !== '';
        }
    </script>
}

<style>
    .question-detail-card,
    .answer-item,
    .comment-box {
        width: 800px !important; /* Kích thước tối đa cho card */
        margin: auto !important; /* Giữa màn hình */
        
        padding: 20px !important; /* Padding cho card */
        border-radius: 8px !important; /* Bo tròn góc */
        background-color: #f5f5f5; /* Light gray background */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    }

    .answer-item {
        display: block; /* Sắp xếp theo chiều dọc */
        border-bottom: 1px solid #ddd; /* Border to separate answers */
        padding-bottom: 10px;
        margin-bottom: 20px; /* Padding after border */
    }

    /* Đặt chiều cao cố định cho card để ổn định UI */
    .question-detail-card {
        height: 400px !important; /* Chiều cao cố định */
        overflow: auto !important;
        margin-bottom: 20px;/* Cho phép cuộn khi nội dung vượt quá chiều cao */
    }

    h1#qTitle {
        font-size: 1.5rem; /* Larger title */
        font-weight: bold; /* Bold text */
        margin-bottom: 10px; /* Margin after title */
    }

    p#qUser,
    p#qContent,
    .answer-item p {
        font-family: Roboto, sans-serif; /* Use Roboto font */
        line-height: 1.5; /* Increase line spacing for better readability */
    }

    .btn-primary {
        background-color: #007bff; /* Blue button */
        border-color: #007bff; /* Blue button border */
        /* Add hover effect for button */
        transition: all 0.2s ease-in-out;
    }

        .btn-primary:hover {
            background-color: #0069d9 ; /* Darker blue on hover */
            border-color: #0069d9; /* Darker blue border on hover */
        }
</style>
